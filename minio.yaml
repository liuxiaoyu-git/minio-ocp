apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: minio-ephemeral
  template: minio-ephemeral-template
message: Minio is an object storage compatible with S3
metadata:
  annotations:
    openshift.io/display-name: Minio (Ephemeral)
    tags: instant-app,minio
  name: minio-ephemeral
objects:

- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      haproxy.router.openshift.io/timeout: 4m
      template.openshift.io/expose-uri: http://{.spec.host}{.spec.path}
    name: ${MINIO_SERVICE_NAME}
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: ${MINIO_SERVICE_NAME}

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${MINIO_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${MINIO_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${MINIO_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          args:
          - server
          - /data
          env:
          - name: MINIO_ACCESS_KEY
            value: "${MINIO_ACCESS_KEY}"
          - name: MINIO_SECRET_KEY
            value: "${MINIO_SECRET_KEY}"
          image: 'minio/minio:latest'
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 20
          name: minio
          readinessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 20
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "1Gi"
              cpu: "1000m"
          securityContext:
            capabilities: {}
            privileged: false
          volumeMounts:
            - mountPath: /data
              name: ephemeral-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
         - name: ephemeral-data
           emptyDir:
             medium: ""
    triggers:
    - type: ConfigChange

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${MINIO_SERVICE_NAME}", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    name: ${MINIO_SERVICE_NAME}
  spec:
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 9000
    selector:
      name: ${MINIO_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP

# Import minio's image
- apiVersion: "image.openshift.io/v1"
  kind: ImageStream
  metadata:
    name: minio
    label:
      app: minio
      template: minio-template
  spec:
    failedBuildHistoryLimit: 1
    successfulBuildsHistoryLimit: 1
    lookupPolicy:
      local: true
    tags:
      - name: latest
        from:
          kind: DockerImage
          name: docker.io/minio/minio
        importPolicy:
          scheduled: true

parameters:
- description: The name of the OpenShift Service exposed for the Minio container.
  displayName: Minio Service Name
  name: MINIO_SERVICE_NAME
  value: minio
- description: Name of the ImageStreamTag to be used for the Minio image.
  displayName: Minio ImageStreamTag
  name: MINIO_IMAGE_STREAM_TAG
  value: minio:latest
- description: MINIO Access Key
  name: MINIO_ACCESS_KEY
  value: "DEVELOPER-ACCESS-KEY"
- description: MINIO Secret Key
  name: MINIO_SECRET_KEY
  value: "DEVELOPER-SECRET-KEY"
